package account

import "time"

//　　第一条  为了规范企业会计确认、计量和报告行为，保证会计信息质量，根据《中华人民共和国会计法》和其他有关法律、行政法规，制定本准则。
//第二条  本准则适用于在中华人民共和国境内设立的企业（包括公司，下同）。
type Enterprise struct {
}

//　　第三条  企业会计准则包括基本准则和具体准则，具体准则的制定应当遵循本准则。
//　　第四条  企业应当编制财务会计报告（又称财务报告，下同）。财务会计报告的目标是向财务会计报告使用者提供与企业财务状况、经营成果和现金流量等有关的会计信息，反映企业管理层受托责任履行情况，有助于财务会计报告使用者作出经济决策。
// 　　财务会计报告使用者包括投资者、债权人、政府及其有关部门和社会公众等。
type Report struct {
	Period Period
}

//　　第五条  企业应当对其本身发生的交易或者事项进行会计确认、计量和报告。
type Transaction struct {
	At          time.Time
	Period      Period
	Rights      []Right
	Obligations []Obligation
}

type Matter struct {
}

//　　第六条  企业会计确认、计量和报告应当以持续经营为前提。
// 　　第七条  企业应当划分会计期间，分期结算账目和编制财务会计报告。
// 　　会计期间分为年度和中期。中期是指短于一个完整的会计年度的报告期间。
type Period struct {
	StartTime time.Time
	EndTime   time.Time
}

//　　第八条  企业会计应当以货币计量。
var CURRENCYS map[string]string = map[string]string{
	"RMB": "人民币",
	"JPY": "日元",
	"USD": "美元",
	"EUR": "欧元",
	"GBP": "英镑",
}

//　　第九条  企业应当以权责发生制为基础进行会计确认、计量和报告。
type Right struct {
}

type Obligation struct {
}

//第十条  企业应当按照交易或者事项的经济特征确定会计要素。会计要素包括资产、负债、所有者权益、收入、费用和利润。
type Asset struct {
	Owner Enterprise
	Value Value
}

type Debt struct {
	Owner Enterprise
	Value Value
}

type OwnersEquity struct {
}

type Income struct {
}

type Payment struct {
}

type Profit struct {
}

// 　　第十一条  企业应当采用借贷记账法记账。
type Direction int

const (
	Debit Direction = iota
	Credit
)

type Record struct {
	AccountName string    //科目名称
	Direction   Direction //借贷方向
	Amount      float64   //金额
	Currency    string    //币种
}

type Entry []Record

//　　第十二条  企业应当以实际发生的交易或者事项为依据进行会计确认、计量和报告，如实反映符合确认和计量要求的各项会计要素及其他相关信息，保证会计信息真实可靠、内容完整。
// 　　第十三条  企业提供的会计信息应当与财务会计报告使用者的经济决策需要相关，有助于财务会计报告使用者对企业过去、现在或者未来的情况作出评价或者预测。
// 　　第十四条  企业提供的会计信息应当清晰明了，便于财务会计报告使用者理解和使用。
// 　　第十五条  企业提供的会计信息应当具有可比性。
// 　　同一企业不同时期发生的相同或者相似的交易或者事项，应当采用一致的会计政策，不得随意变更。确需变更的，应当在附注中说明。
// 　　不同企业发生的相同或者相似的交易或者事项，应当采用规定的会计政策，确保会计信息口径一致、相互可比。
// 　　第十六条  企业应当按照交易或者事项的经济实质进行会计确认、计量和报告，不应仅以交易或者事项的法律形式为依据。
// 　　第十七条  企业提供的会计信息应当反映与企业财务状况、经营成果和现金流量等有关的所有重要交易或者事项。
// 　　第十八条  企业对交易或者事项进行会计确认、计量和报告应当保持应有的谨慎，不应高估资产或者收益、低估负债或者费用。
// 　　第十九条  企业对于已经发生的交易或者事项，应当及时进行会计确认、计量和报告，不得提前或者延后。
// 第三章  资  产
// 　　第二十条  资产是指企业过去的交易或者事项形成的、由企业拥有或者控制的、预期会给企业带来经济利益的资源。
// 　　前款所指的企业过去的交易或者事项包括购买、生产、建造行为或其他交易或者事项。预期在未来发生的交易或者事项不形成资产。
//　　由企业拥有或者控制，是指企业享有某项资源的所有权，或者虽然不享有某项资源的所有权，但该资源能被企业所控制。
// 　　预期会给企业带来经济利益，是指直接或者间接导致现金和现金等价物流入企业的潜力。
// 　　第二十一条  符合本准则第二十条规定的资产定义的资源，在同时满足以下条件时，确认为资产：
// 　　（一）与该资源有关的经济利益很可能流入企业；
// 　　（二）该资源的成本或者价值能够可靠地计量。
// 　　第二十二条  符合资产定义和资产确认条件的项目，应当列入资产负债表；符合资产定义、但不符合资产确认条件的项目，不应当列入资产负债表。
// 第四章  负  债
// 　　第二十三条  负债是指企业过去的交易或者事项形成的、预期会导致经济利益流出企业的现时义务。
// 　　现时义务是指企业在现行条件下已承担的义务。未来发生的交易或者事项形成的义务，不属于现时义务，不应当确认为负债。
//　　第二十四条  符合本准则第二十三条规定的负债定义的义务，在同时满足以下条件时，确认为负债：
// 　　（一）与该义务有关的经济利益很可能流出企业；
// 　　（二）未来流出的经济利益的金额能够可靠地计量。
//　　第二十五条  符合负债定义和负债确认条件的项目，应当列入资产负债表；符合负债定义、但不符合负债确认条件的项目，不应当列入资产负债表。
// 第五章  所有者权益
// 　　第二十六条  所有者权益是指企业资产扣除负债后由所有者享有的剩余权益。

// 第九章  会计计量
// 　　第四十一条  企业在将符合确认条件的会计要素登记入账并列报于会计报表及其附注（又称财务报表，下同）时，应当按照规定的会计计量属性进行计量，确定其金额。
// 　　第四十二条  会计计量属性主要包括：
// 　　（一）历史成本。在历史成本计量下，资产按照购置时支付的现金或者现金等价物的金额，或者按照购置资产时所付出的对价的公允价值计量。负债按照因承担现时义务而实际收到的款项或者资产的金额，或者承担现时义务的合同金额，或者按照日常活动中为偿还负债预期需要支付的现金或者现金等价物的金额计量。
// 　　（二）重置成本。在重置成本计量下，资产按照现在购买相同或者相似资产所需支付的现金或者现金等价物的金额计量。负债按照现在偿付该项债务所需支付的现金或者现金等价物的金额计量。
// 　　（三）可变现净值。在可变现净值计量下，资产按照其正常对外销售所能收到现金或者现金等价物的金额扣减该资产至完工时估计将要发生的成本、估计的销售费用以及相关税费后的金额计量。
// 　　（四）现值。在现值计量下，资产按照预计从其持续使用和最终处置中所产生的未来净现金流入量的折现金额计量。负债按照预计期限内需要偿还的未来净现金流出量的折现金额计量。
// 　　（五）公允价值。在公允价值计量下，资产和负债按照市场参与者在计量日发生的有序交易中，出售资产所能收到或者转移负债所需支付的价格计量。
// 第四十三条  企业在对会计要素进行计量时，一般应当采用历史成本，采用重置成本、可变现净值、现值、公允价值计量的，应当保证所确定的会计要素金额能够取得并可靠计量。
type Value struct {
	Historical    float64 // 历史成本
	Replacement   float64 //重置成本
	NetRealizable float64 //可变现净值
	Fair          float64 //公允价值
}

//减去
func (v Value) Subtract(value Value) Value {
	return Value{
		Historical:    v.Historical - value.Historical,
		Replacement:   v.Replacement - value.Replacement,
		NetRealizable: v.NetRealizable - value.NetRealizable,
		Fair:          v.Fair - value.Fair,
	}
}

//相加
func (v Value) Add(value Value) Value {
	return Value{
		Historical:    v.Historical + value.Historical,
		Replacement:   v.Replacement + value.Replacement,
		NetRealizable: v.NetRealizable + value.NetRealizable,
		Fair:          v.Fair + value.Fair,
	}
}
